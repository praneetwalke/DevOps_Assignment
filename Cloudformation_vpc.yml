AWSTemplateFormatVersion: '2010-09-09'
Description: >
  This CloudFormation script creates a VPC with two public and two private subnets,
  sets up route tables, security groups, ELB, ALB, and a private Route 53 hosted zone.
  Additionally, it creates CNAME records for both the ALB and ELB.

Parameters:
  VpcCidrBlock:
    Type: String
    Default: '10.0.0.0/16'
    Description: CIDR block for the VPC 

Resources:
  # Create a Virtual Private Cloud (VPC)
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'  # Enable DNS support within the VPC
      EnableDnsHostnames: 'true'  # Enable DNS hostnames in the VPC
      Tags:
        - Key: Name
          Value: 'MyVPC'

  # Create Public Subnet 1
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: 'us-east-1a'
      MapPublicIpOnLaunch: 'true'  # Automatically assign public IPs to instances
      Tags:
        - Key: Name
          Value: 'PublicSubnet1'

  # Create Public Subnet 2
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: 'us-east-1b'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: 'PublicSubnet2'

  # Create Private Subnet 1
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: 'us-east-1a'
      Tags:
        - Key: Name
          Value: 'PrivateSubnet1'

  # Create Private Subnet 2
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.4.0/24'
      AvailabilityZone: 'us-east-1b'
      Tags:
        - Key: Name
          Value: 'PrivateSubnet2'

  # Create Route Table for Public Subnets
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC

  # Add Route to Internet Gateway for Public Subnets
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: 'MyInternetGateway'  # Ensure the IGW is created first
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'  # Default route to the internet
      GatewayId: !Ref MyInternetGateway

  # Create an Internet Gateway to allow internet access
  MyInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: 'MyInternetGateway'

  # Attach the Internet Gateway to the VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  # Associate Public Subnet 1 with the Public Route Table
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # Associate Public Subnet 2 with the Public Route Table
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Create a Security Group to Allow HTTP and HTTPS traffic
  WebSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow HTTP and HTTPS traffic'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'  # Allow all traffic on HTTP (port 80)
        - IpProtocol: 'tcp'
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'  # Allow all traffic on HTTPS (port 443)

  # Create an Application Load Balancer (ALB)
  MyALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: 'MyALB'
      Subnets:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      SecurityGroups:
        - Ref: WebSecurityGroup
      LoadBalancerType: 'application'  # ALB for Layer 7 (HTTP/HTTPS)
      Scheme: 'internet-facing'  # Accessible from the internet

  # Create a Classic Load Balancer (ELB)
  MyELB:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Listeners:
        - Protocol: 'HTTP'
          LoadBalancerPort: '80'
          InstancePort: '80'
      Subnets:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
      SecurityGroups:
        - Ref: WebSecurityGroup

  # Create a Private Hosted Zone in Route 53
  MyPrivateZone:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name: 'myprivatezone.local'  # Private domain name
      VPCs:
        - VPCId: !Ref MyVPC
          VPCRegion: 'us-east-1'
      HostedZoneConfig:
        Comment: 'Private hosted zone for ALB and ELB'

  # Create a CNAME record for ALB
  ALBCNAMERecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref MyPrivateZone
      Name: 'alb.myprivatezone.local.'  # ALB DNS record
      Type: 'CNAME'
      TTL: '60'  # Time-to-live for the DNS record
      ResourceRecords:
        - !GetAtt MyALB.DNSName  # ALB DNS name

  # Create a CNAME record for ELB
  ELBCNAMERecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref MyPrivateZone
      Name: 'elb.myprivatezone.local.'  # ELB DNS record
      Type: 'CNAME'
      TTL: '60'
      ResourceRecords:
        - !GetAtt MyELB.DNSName  # ELB DNS name

Outputs:
  VPCId:
    Value: !Ref MyVPC
    Description: 'The ID of the created VPC'
  ALBDNSName:
    Value: !GetAtt MyALB.DNSName
    Description: 'The DNS name of the Application Load Balancer'
  ELBDNSName:
    Value: !GetAtt MyELB.DNSName
    Description: 'The DNS name of the Classic Load Balancer'
